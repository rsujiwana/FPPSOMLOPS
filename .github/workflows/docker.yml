name: Build Docker

on:
  pull_request:
    types: [opened, reopened]
    branches:
      - main
      - dev
      - 'feature/**'
  push:
    branches:
      - main
      - dev
      - 'feature/**'
    paths:
      - '**.py'
      - 'Dockerfile'
      - 'entrypoint.sh'
      
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  hadolint:
    if: github.event_name == 'pull_request'
    permissions:
      contents: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run Docker linting using Hadolint
        id: hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          failure-threshold: warning
          ignore: 'DL3018,DL3006,DL3008'
      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `
            #### Hadolint: \`${{ steps.hadolint.outcome }}\`
            \`\`\`
            ${process.env.HADOLINT_RESULTS}
            \`\`\`
            `;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  trivy_and_push:
    needs: [hadolint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: convert repo name to lowercase
        run: |
          echo "REPO=$(echo ${GITHUB_REPOSITORY,,} | cut -d'/' -f2)" >> ${GITHUB_ENV}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO }}:v0.1
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.22.0
        with:
          image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO }}:v0.1'
          format: 'sarif'
          output: 'trivy-results.sarif'
        env:
          TRIVY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          TRIVY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Upload Trivy scan results to GitHub Action
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      - name: run docker
        run: docker run -d -p 5000:5000  ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO }}:v0.1
      - name: test curl
        run: |
          if ! http_status=$(curl -w "%{http_code}\n" -s -XPOST -H 'Content-Type: application/json' -d '{"data":"This is a sample input text"}' http://localhost:5000/label); then
            echo "Warning: curl failed with $http_status!"
            #exit 1
          else
            if http_status=$(curl -w "%{http_code}\n" -s -XPOST -H 'Content-Type: application/json' -d '{"data":"This is a sample input text"}' http://localhost:5000/label)  && [[ $http_status != "200" ]]; then
              echo "Warning: curl failed with $http_status!"
              #exit 1
            fi
          fi


  terraform:
    needs: [trivy_and_push]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GCP_KEY }}
          export_default_credentials: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Destroy VM (if exists)
        run: terraform destroy -auto-approve -target=google_compute_instance.vm_instance
        working-directory: my-terraform-project
        continue-on-error: true  # Ignore error if the resource does not exist

      - name: Terraform Init
        run: terraform init
        working-directory: my-terraform-project
      
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: my-terraform-project
